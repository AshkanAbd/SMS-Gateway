// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AshkanAbd/arvancloud_sms_gateway/internal/modules/sms/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockISmsRepository creates a new instance of MockISmsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISmsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISmsRepository {
	mock := &MockISmsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockISmsRepository is an autogenerated mock type for the ISmsRepository type
type MockISmsRepository struct {
	mock.Mock
}

type MockISmsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISmsRepository) EXPECT() *MockISmsRepository_Expecter {
	return &MockISmsRepository_Expecter{mock: &_m.Mock}
}

// CreateScheduleMessages provides a mock function for the type MockISmsRepository
func (_mock *MockISmsRepository) CreateScheduleMessages(ctx context.Context, msgs []models.Sms) error {
	ret := _mock.Called(ctx, msgs)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduleMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Sms) error); ok {
		r0 = returnFunc(ctx, msgs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockISmsRepository_CreateScheduleMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduleMessages'
type MockISmsRepository_CreateScheduleMessages_Call struct {
	*mock.Call
}

// CreateScheduleMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs []models.Sms
func (_e *MockISmsRepository_Expecter) CreateScheduleMessages(ctx interface{}, msgs interface{}) *MockISmsRepository_CreateScheduleMessages_Call {
	return &MockISmsRepository_CreateScheduleMessages_Call{Call: _e.mock.On("CreateScheduleMessages", ctx, msgs)}
}

func (_c *MockISmsRepository_CreateScheduleMessages_Call) Run(run func(ctx context.Context, msgs []models.Sms)) *MockISmsRepository_CreateScheduleMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.Sms
		if args[1] != nil {
			arg1 = args[1].([]models.Sms)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsRepository_CreateScheduleMessages_Call) Return(err error) *MockISmsRepository_CreateScheduleMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockISmsRepository_CreateScheduleMessages_Call) RunAndReturn(run func(ctx context.Context, msgs []models.Sms) error) *MockISmsRepository_CreateScheduleMessages_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueMessages provides a mock function for the type MockISmsRepository
func (_mock *MockISmsRepository) EnqueueMessages(ctx context.Context, count int) ([]models.Sms, error) {
	ret := _mock.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueMessages")
	}

	var r0 []models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]models.Sms, error)); ok {
		return returnFunc(ctx, count)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []models.Sms); ok {
		r0 = returnFunc(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Sms)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, count)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsRepository_EnqueueMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueMessages'
type MockISmsRepository_EnqueueMessages_Call struct {
	*mock.Call
}

// EnqueueMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockISmsRepository_Expecter) EnqueueMessages(ctx interface{}, count interface{}) *MockISmsRepository_EnqueueMessages_Call {
	return &MockISmsRepository_EnqueueMessages_Call{Call: _e.mock.On("EnqueueMessages", ctx, count)}
}

func (_c *MockISmsRepository_EnqueueMessages_Call) Run(run func(ctx context.Context, count int)) *MockISmsRepository_EnqueueMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsRepository_EnqueueMessages_Call) Return(smss []models.Sms, err error) *MockISmsRepository_EnqueueMessages_Call {
	_c.Call.Return(smss, err)
	return _c
}

func (_c *MockISmsRepository_EnqueueMessages_Call) RunAndReturn(run func(ctx context.Context, count int) ([]models.Sms, error)) *MockISmsRepository_EnqueueMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessagesByUserId provides a mock function for the type MockISmsRepository
func (_mock *MockISmsRepository) GetMessagesByUserId(ctx context.Context, userId string) ([]models.Sms, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByUserId")
	}

	var r0 []models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]models.Sms, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []models.Sms); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Sms)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsRepository_GetMessagesByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessagesByUserId'
type MockISmsRepository_GetMessagesByUserId_Call struct {
	*mock.Call
}

// GetMessagesByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockISmsRepository_Expecter) GetMessagesByUserId(ctx interface{}, userId interface{}) *MockISmsRepository_GetMessagesByUserId_Call {
	return &MockISmsRepository_GetMessagesByUserId_Call{Call: _e.mock.On("GetMessagesByUserId", ctx, userId)}
}

func (_c *MockISmsRepository_GetMessagesByUserId_Call) Run(run func(ctx context.Context, userId string)) *MockISmsRepository_GetMessagesByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsRepository_GetMessagesByUserId_Call) Return(smss []models.Sms, err error) *MockISmsRepository_GetMessagesByUserId_Call {
	_c.Call.Return(smss, err)
	return _c
}

func (_c *MockISmsRepository_GetMessagesByUserId_Call) RunAndReturn(run func(ctx context.Context, userId string) ([]models.Sms, error)) *MockISmsRepository_GetMessagesByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// RescheduledMessages provides a mock function for the type MockISmsRepository
func (_mock *MockISmsRepository) RescheduledMessages(ctx context.Context, ids []string) error {
	ret := _mock.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for RescheduledMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockISmsRepository_RescheduledMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RescheduledMessages'
type MockISmsRepository_RescheduledMessages_Call struct {
	*mock.Call
}

// RescheduledMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *MockISmsRepository_Expecter) RescheduledMessages(ctx interface{}, ids interface{}) *MockISmsRepository_RescheduledMessages_Call {
	return &MockISmsRepository_RescheduledMessages_Call{Call: _e.mock.On("RescheduledMessages", ctx, ids)}
}

func (_c *MockISmsRepository_RescheduledMessages_Call) Run(run func(ctx context.Context, ids []string)) *MockISmsRepository_RescheduledMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsRepository_RescheduledMessages_Call) Return(err error) *MockISmsRepository_RescheduledMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockISmsRepository_RescheduledMessages_Call) RunAndReturn(run func(ctx context.Context, ids []string) error) *MockISmsRepository_RescheduledMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageAsFailed provides a mock function for the type MockISmsRepository
func (_mock *MockISmsRepository) SetMessageAsFailed(ctx context.Context, id string) (models.Sms, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetMessageAsFailed")
	}

	var r0 models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Sms, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Sms); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Sms)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsRepository_SetMessageAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageAsFailed'
type MockISmsRepository_SetMessageAsFailed_Call struct {
	*mock.Call
}

// SetMessageAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockISmsRepository_Expecter) SetMessageAsFailed(ctx interface{}, id interface{}) *MockISmsRepository_SetMessageAsFailed_Call {
	return &MockISmsRepository_SetMessageAsFailed_Call{Call: _e.mock.On("SetMessageAsFailed", ctx, id)}
}

func (_c *MockISmsRepository_SetMessageAsFailed_Call) Run(run func(ctx context.Context, id string)) *MockISmsRepository_SetMessageAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsRepository_SetMessageAsFailed_Call) Return(sms models.Sms, err error) *MockISmsRepository_SetMessageAsFailed_Call {
	_c.Call.Return(sms, err)
	return _c
}

func (_c *MockISmsRepository_SetMessageAsFailed_Call) RunAndReturn(run func(ctx context.Context, id string) (models.Sms, error)) *MockISmsRepository_SetMessageAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageAsSent provides a mock function for the type MockISmsRepository
func (_mock *MockISmsRepository) SetMessageAsSent(ctx context.Context, id string) (models.Sms, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetMessageAsSent")
	}

	var r0 models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Sms, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Sms); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Sms)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsRepository_SetMessageAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageAsSent'
type MockISmsRepository_SetMessageAsSent_Call struct {
	*mock.Call
}

// SetMessageAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockISmsRepository_Expecter) SetMessageAsSent(ctx interface{}, id interface{}) *MockISmsRepository_SetMessageAsSent_Call {
	return &MockISmsRepository_SetMessageAsSent_Call{Call: _e.mock.On("SetMessageAsSent", ctx, id)}
}

func (_c *MockISmsRepository_SetMessageAsSent_Call) Run(run func(ctx context.Context, id string)) *MockISmsRepository_SetMessageAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsRepository_SetMessageAsSent_Call) Return(sms models.Sms, err error) *MockISmsRepository_SetMessageAsSent_Call {
	_c.Call.Return(sms, err)
	return _c
}

func (_c *MockISmsRepository_SetMessageAsSent_Call) RunAndReturn(run func(ctx context.Context, id string) (models.Sms, error)) *MockISmsRepository_SetMessageAsSent_Call {
	_c.Call.Return(run)
	return _c
}
