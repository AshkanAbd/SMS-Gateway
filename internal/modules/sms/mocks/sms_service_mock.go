// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AshkanAbd/arvancloud_sms_gateway/internal/modules/sms/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockISmsService creates a new instance of MockISmsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISmsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISmsService {
	mock := &MockISmsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockISmsService is an autogenerated mock type for the ISmsService type
type MockISmsService struct {
	mock.Mock
}

type MockISmsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISmsService) EXPECT() *MockISmsService_Expecter {
	return &MockISmsService_Expecter{mock: &_m.Mock}
}

// EnqueueEarliest provides a mock function for the type MockISmsService
func (_mock *MockISmsService) EnqueueEarliest(ctx context.Context, count int) (int, error) {
	ret := _mock.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueEarliest")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return returnFunc(ctx, count)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = returnFunc(ctx, count)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, count)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsService_EnqueueEarliest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueEarliest'
type MockISmsService_EnqueueEarliest_Call struct {
	*mock.Call
}

// EnqueueEarliest is a helper method to define mock.On call
//   - ctx context.Context
//   - count int
func (_e *MockISmsService_Expecter) EnqueueEarliest(ctx interface{}, count interface{}) *MockISmsService_EnqueueEarliest_Call {
	return &MockISmsService_EnqueueEarliest_Call{Call: _e.mock.On("EnqueueEarliest", ctx, count)}
}

func (_c *MockISmsService_EnqueueEarliest_Call) Run(run func(ctx context.Context, count int)) *MockISmsService_EnqueueEarliest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsService_EnqueueEarliest_Call) Return(n int, err error) *MockISmsService_EnqueueEarliest_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockISmsService_EnqueueEarliest_Call) RunAndReturn(run func(ctx context.Context, count int) (int, error)) *MockISmsService_EnqueueEarliest_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSms provides a mock function for the type MockISmsService
func (_mock *MockISmsService) GetUserSms(ctx context.Context, userId string) ([]models.Sms, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSms")
	}

	var r0 []models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]models.Sms, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []models.Sms); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Sms)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsService_GetUserSms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSms'
type MockISmsService_GetUserSms_Call struct {
	*mock.Call
}

// GetUserSms is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockISmsService_Expecter) GetUserSms(ctx interface{}, userId interface{}) *MockISmsService_GetUserSms_Call {
	return &MockISmsService_GetUserSms_Call{Call: _e.mock.On("GetUserSms", ctx, userId)}
}

func (_c *MockISmsService_GetUserSms_Call) Run(run func(ctx context.Context, userId string)) *MockISmsService_GetUserSms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsService_GetUserSms_Call) Return(smss []models.Sms, err error) *MockISmsService_GetUserSms_Call {
	_c.Call.Return(smss, err)
	return _c
}

func (_c *MockISmsService_GetUserSms_Call) RunAndReturn(run func(ctx context.Context, userId string) ([]models.Sms, error)) *MockISmsService_GetUserSms_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleSms provides a mock function for the type MockISmsService
func (_mock *MockISmsService) ScheduleSms(ctx context.Context, userId string, msgs []models.Sms) error {
	ret := _mock.Called(ctx, userId, msgs)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleSms")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []models.Sms) error); ok {
		r0 = returnFunc(ctx, userId, msgs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockISmsService_ScheduleSms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleSms'
type MockISmsService_ScheduleSms_Call struct {
	*mock.Call
}

// ScheduleSms is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - msgs []models.Sms
func (_e *MockISmsService_Expecter) ScheduleSms(ctx interface{}, userId interface{}, msgs interface{}) *MockISmsService_ScheduleSms_Call {
	return &MockISmsService_ScheduleSms_Call{Call: _e.mock.On("ScheduleSms", ctx, userId, msgs)}
}

func (_c *MockISmsService_ScheduleSms_Call) Run(run func(ctx context.Context, userId string, msgs []models.Sms)) *MockISmsService_ScheduleSms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []models.Sms
		if args[2] != nil {
			arg2 = args[2].([]models.Sms)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockISmsService_ScheduleSms_Call) Return(err error) *MockISmsService_ScheduleSms_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockISmsService_ScheduleSms_Call) RunAndReturn(run func(ctx context.Context, userId string, msgs []models.Sms) error) *MockISmsService_ScheduleSms_Call {
	_c.Call.Return(run)
	return _c
}

// SendFromQueue provides a mock function for the type MockISmsService
func (_mock *MockISmsService) SendFromQueue(ctx context.Context) (models.Sms, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendFromQueue")
	}

	var r0 models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (models.Sms, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) models.Sms); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(models.Sms)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsService_SendFromQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendFromQueue'
type MockISmsService_SendFromQueue_Call struct {
	*mock.Call
}

// SendFromQueue is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockISmsService_Expecter) SendFromQueue(ctx interface{}) *MockISmsService_SendFromQueue_Call {
	return &MockISmsService_SendFromQueue_Call{Call: _e.mock.On("SendFromQueue", ctx)}
}

func (_c *MockISmsService_SendFromQueue_Call) Run(run func(ctx context.Context)) *MockISmsService_SendFromQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockISmsService_SendFromQueue_Call) Return(sms models.Sms, err error) *MockISmsService_SendFromQueue_Call {
	_c.Call.Return(sms, err)
	return _c
}

func (_c *MockISmsService_SendFromQueue_Call) RunAndReturn(run func(ctx context.Context) (models.Sms, error)) *MockISmsService_SendFromQueue_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageAsFailed provides a mock function for the type MockISmsService
func (_mock *MockISmsService) SetMessageAsFailed(ctx context.Context, id string) (models.Sms, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetMessageAsFailed")
	}

	var r0 models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Sms, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Sms); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Sms)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsService_SetMessageAsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageAsFailed'
type MockISmsService_SetMessageAsFailed_Call struct {
	*mock.Call
}

// SetMessageAsFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockISmsService_Expecter) SetMessageAsFailed(ctx interface{}, id interface{}) *MockISmsService_SetMessageAsFailed_Call {
	return &MockISmsService_SetMessageAsFailed_Call{Call: _e.mock.On("SetMessageAsFailed", ctx, id)}
}

func (_c *MockISmsService_SetMessageAsFailed_Call) Run(run func(ctx context.Context, id string)) *MockISmsService_SetMessageAsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsService_SetMessageAsFailed_Call) Return(sms models.Sms, err error) *MockISmsService_SetMessageAsFailed_Call {
	_c.Call.Return(sms, err)
	return _c
}

func (_c *MockISmsService_SetMessageAsFailed_Call) RunAndReturn(run func(ctx context.Context, id string) (models.Sms, error)) *MockISmsService_SetMessageAsFailed_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageAsSent provides a mock function for the type MockISmsService
func (_mock *MockISmsService) SetMessageAsSent(ctx context.Context, id string) (models.Sms, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetMessageAsSent")
	}

	var r0 models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.Sms, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.Sms); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Sms)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsService_SetMessageAsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageAsSent'
type MockISmsService_SetMessageAsSent_Call struct {
	*mock.Call
}

// SetMessageAsSent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockISmsService_Expecter) SetMessageAsSent(ctx interface{}, id interface{}) *MockISmsService_SetMessageAsSent_Call {
	return &MockISmsService_SetMessageAsSent_Call{Call: _e.mock.On("SetMessageAsSent", ctx, id)}
}

func (_c *MockISmsService_SetMessageAsSent_Call) Run(run func(ctx context.Context, id string)) *MockISmsService_SetMessageAsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsService_SetMessageAsSent_Call) Return(sms models.Sms, err error) *MockISmsService_SetMessageAsSent_Call {
	_c.Call.Return(sms, err)
	return _c
}

func (_c *MockISmsService_SetMessageAsSent_Call) RunAndReturn(run func(ctx context.Context, id string) (models.Sms, error)) *MockISmsService_SetMessageAsSent_Call {
	_c.Call.Return(run)
	return _c
}
