// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AshkanAbd/arvancloud_sms_gateway/internal/modules/sms/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockISmsQueue creates a new instance of MockISmsQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISmsQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISmsQueue {
	mock := &MockISmsQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockISmsQueue is an autogenerated mock type for the ISmsQueue type
type MockISmsQueue struct {
	mock.Mock
}

type MockISmsQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISmsQueue) EXPECT() *MockISmsQueue_Expecter {
	return &MockISmsQueue_Expecter{mock: &_m.Mock}
}

// Enqueue provides a mock function for the type MockISmsQueue
func (_mock *MockISmsQueue) Enqueue(ctx context.Context, msg []models.Sms) error {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Sms) error); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockISmsQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockISmsQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - msg []models.Sms
func (_e *MockISmsQueue_Expecter) Enqueue(ctx interface{}, msg interface{}) *MockISmsQueue_Enqueue_Call {
	return &MockISmsQueue_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, msg)}
}

func (_c *MockISmsQueue_Enqueue_Call) Run(run func(ctx context.Context, msg []models.Sms)) *MockISmsQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.Sms
		if args[1] != nil {
			arg1 = args[1].([]models.Sms)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockISmsQueue_Enqueue_Call) Return(err error) *MockISmsQueue_Enqueue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockISmsQueue_Enqueue_Call) RunAndReturn(run func(ctx context.Context, msg []models.Sms) error) *MockISmsQueue_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetLength provides a mock function for the type MockISmsQueue
func (_mock *MockISmsQueue) GetLength(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLength")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsQueue_GetLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLength'
type MockISmsQueue_GetLength_Call struct {
	*mock.Call
}

// GetLength is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockISmsQueue_Expecter) GetLength(ctx interface{}) *MockISmsQueue_GetLength_Call {
	return &MockISmsQueue_GetLength_Call{Call: _e.mock.On("GetLength", ctx)}
}

func (_c *MockISmsQueue_GetLength_Call) Run(run func(ctx context.Context)) *MockISmsQueue_GetLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockISmsQueue_GetLength_Call) Return(n int, err error) *MockISmsQueue_GetLength_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockISmsQueue_GetLength_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *MockISmsQueue_GetLength_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function for the type MockISmsQueue
func (_mock *MockISmsQueue) Pop(ctx context.Context) (models.Sms, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 models.Sms
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (models.Sms, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) models.Sms); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(models.Sms)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockISmsQueue_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockISmsQueue_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockISmsQueue_Expecter) Pop(ctx interface{}) *MockISmsQueue_Pop_Call {
	return &MockISmsQueue_Pop_Call{Call: _e.mock.On("Pop", ctx)}
}

func (_c *MockISmsQueue_Pop_Call) Run(run func(ctx context.Context)) *MockISmsQueue_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockISmsQueue_Pop_Call) Return(sms models.Sms, err error) *MockISmsQueue_Pop_Call {
	_c.Call.Return(sms, err)
	return _c
}

func (_c *MockISmsQueue_Pop_Call) RunAndReturn(run func(ctx context.Context) (models.Sms, error)) *MockISmsQueue_Pop_Call {
	_c.Call.Return(run)
	return _c
}
