// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AshkanAbd/arvancloud_sms_gateway/internal/modules/user/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserService creates a new instance of MockIUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserService {
	mock := &MockIUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserService is an autogenerated mock type for the IUserService type
type MockIUserService struct {
	mock.Mock
}

type MockIUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserService) EXPECT() *MockIUserService_Expecter {
	return &MockIUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockIUserService
func (_mock *MockIUserService) CreateUser(ctx context.Context, user models.User) (models.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) (models.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *MockIUserService_Expecter) CreateUser(ctx interface{}, user interface{}) *MockIUserService_CreateUser_Call {
	return &MockIUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockIUserService_CreateUser_Call) Run(run func(ctx context.Context, user models.User)) *MockIUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.User
		if args[1] != nil {
			arg1 = args[1].(models.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserService_CreateUser_Call) Return(user1 models.User, err error) *MockIUserService_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockIUserService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user models.User) (models.User, error)) *MockIUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DecreaseUserBalance provides a mock function for the type MockIUserService
func (_mock *MockIUserService) DecreaseUserBalance(ctx context.Context, userId string, amount int64) (int64, error) {
	ret := _mock.Called(ctx, userId, amount)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseUserBalance")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) (int64, error)); ok {
		return returnFunc(ctx, userId, amount)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) int64); ok {
		r0 = returnFunc(ctx, userId, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = returnFunc(ctx, userId, amount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_DecreaseUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecreaseUserBalance'
type MockIUserService_DecreaseUserBalance_Call struct {
	*mock.Call
}

// DecreaseUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - amount int64
func (_e *MockIUserService_Expecter) DecreaseUserBalance(ctx interface{}, userId interface{}, amount interface{}) *MockIUserService_DecreaseUserBalance_Call {
	return &MockIUserService_DecreaseUserBalance_Call{Call: _e.mock.On("DecreaseUserBalance", ctx, userId, amount)}
}

func (_c *MockIUserService_DecreaseUserBalance_Call) Run(run func(ctx context.Context, userId string, amount int64)) *MockIUserService_DecreaseUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUserService_DecreaseUserBalance_Call) Return(n int64, err error) *MockIUserService_DecreaseUserBalance_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIUserService_DecreaseUserBalance_Call) RunAndReturn(run func(ctx context.Context, userId string, amount int64) (int64, error)) *MockIUserService_DecreaseUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockIUserService
func (_mock *MockIUserService) GetUser(ctx context.Context, id string) (models.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockIUserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockIUserService_Expecter) GetUser(ctx interface{}, id interface{}) *MockIUserService_GetUser_Call {
	return &MockIUserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockIUserService_GetUser_Call) Run(run func(ctx context.Context, id string)) *MockIUserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserService_GetUser_Call) Return(user models.User, err error) *MockIUserService_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserService_GetUser_Call) RunAndReturn(run func(ctx context.Context, id string) (models.User, error)) *MockIUserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IncreaseUserBalance provides a mock function for the type MockIUserService
func (_mock *MockIUserService) IncreaseUserBalance(ctx context.Context, userId string, amount int64) (int64, error) {
	ret := _mock.Called(ctx, userId, amount)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseUserBalance")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) (int64, error)); ok {
		return returnFunc(ctx, userId, amount)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64) int64); ok {
		r0 = returnFunc(ctx, userId, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = returnFunc(ctx, userId, amount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserService_IncreaseUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseUserBalance'
type MockIUserService_IncreaseUserBalance_Call struct {
	*mock.Call
}

// IncreaseUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - amount int64
func (_e *MockIUserService_Expecter) IncreaseUserBalance(ctx interface{}, userId interface{}, amount interface{}) *MockIUserService_IncreaseUserBalance_Call {
	return &MockIUserService_IncreaseUserBalance_Call{Call: _e.mock.On("IncreaseUserBalance", ctx, userId, amount)}
}

func (_c *MockIUserService_IncreaseUserBalance_Call) Run(run func(ctx context.Context, userId string, amount int64)) *MockIUserService_IncreaseUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUserService_IncreaseUserBalance_Call) Return(n int64, err error) *MockIUserService_IncreaseUserBalance_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIUserService_IncreaseUserBalance_Call) RunAndReturn(run func(ctx context.Context, userId string, amount int64) (int64, error)) *MockIUserService_IncreaseUserBalance_Call {
	_c.Call.Return(run)
	return _c
}
